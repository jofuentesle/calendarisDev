---
//Definimos constante para pasar props
const { images = [] } = Astro.props;
---
<script>
  // Core de Swiper y estilos
  import Swiper, { Swiper as SwiperInstance } from 'swiper';
  import { Navigation, Thumbs, FreeMode } from 'swiper/modules';
  import 'swiper/css';
  import 'swiper/css';
  import 'swiper/css/navigation';
  import 'swiper/css/free-mode';
  import 'swiper/css/thumbs';
  // Photoswipe y estilos
  import PhotoSwipeLightbox from 'photoswipe/lightbox';
  import 'photoswipe/style.css';

  let mainSwiper: SwiperInstance|null = null;
  let thumbsSwiper:SwiperInstance|null = null;


  // Ejecutar el script cuando el DOM esté completamente cargado
  function initializeSwiper() {

    // Destruir instancias anteriores si existen
    if (mainSwiper) {
    mainSwiper.destroy();
    mainSwiper = null;
    lightbox.destroy();
  }
  if (thumbsSwiper) {
    thumbsSwiper.destroy(); // Destruir correctamente
    thumbsSwiper = null;
  }
  // Inicializar Swiper de nuevo
  thumbsSwiper = new Swiper(".thumbs", {
    spaceBetween: 10,
    slidesPerView: 4,
    freeMode: true,
    watchSlidesProgress: true,
    modules: [FreeMode],
  });

  mainSwiper = new Swiper(".main", {
    modules: [Navigation, Thumbs],
    loop: true,
    slidesPerView:"auto",
    breakpoints: {
    // Cuando la pantalla es >= 768px
    768: {
      slidesPerView: 1,
      spaceBetween: 30
    },
    // Cuando la pantalla es >= 1024px
    1024: {
      slidesPerView: 1,
      spaceBetween: 40
    }
  },
    spaceBetween: 40,
    navigation: {
      nextEl: ".swiper-button-next",
      prevEl: ".swiper-button-prev",
    },
    thumbs: {
      swiper: thumbsSwiper,
    },
    
  });
  }

  // Configurar e inicializar Photoswipe
const lightbox = new PhotoSwipeLightbox({
  gallery: '#my-slider',
  children: 'a',
  pswpModule: () => import('photoswipe')
});
lightbox.init();

   //Re-inicializar Swiper cada vez que se monta el componente
   document.addEventListener('astro:after-swap', () => {
    initializeSwiper();
    lightbox.init();
  });
  //Llamamos función principal
  setTimeout(() => {
    initializeSwiper();
  });

</script>

<!-- Contenedor principal de Swiper -->
<main>
  <div class="swiper-container">
    <div class="swiper main">
      <div class="swiper-wrapper" id="my-slider">
        {images.map((image) => (
          <a 
            class="swiper-slide"
            href={image.src}
            data-pswp-width="600" data-pswp-height="600"
           
            data-cropped="true"
          >
            <img 
              src={image.src} 
              alt={image.alt} 
              />
          </a>
        ))}
      </div>
      <div class="swiper-button-prev"></div>
      <div class="swiper-button-next"></div>
    </div>
    <div class="swiper thumbs">
      <div class="swiper-wrapper">
        {images.map((image) => (
          <div class="swiper-slide">
            <img src={image.src} alt={image.alt} />
          </div>
        ))}
      </div>
    </div>
  </div>
</main>


<style>
  .swiper-container {
    position: relative;
    height: 600px;
  }
  .swiper.main {
    width: 100%;
    height: 80%;
  }
  .swiper.thumbs {
    width: 100%;
    height: 20%;
    box-sizing: border-box;
    padding: 10px 0;
  }
  .swiper-slide {
    text-align: center;
    font-size: 18px;
    background: #fff;
    display: flex;
    justify-content: center;
    align-items: center;
    background-size: cover;
    background-position: center;
  }
  .thumbs .swiper-slide {
    width: 25%;
    height: 100%;
    opacity: 0.4;
  }
  .thumbs .swiper-slide-thumb-active {
    opacity: 1;
  }
  .swiper-slide img {
    display: block;
    height: 100%;
    width: 100%;
    object-fit: cover;
  }
  
</style>